{"ast":null,"code":"var _jsxFileName = \"/Users/Signe/Documents/work-folder/CODING/BrainStation/Capstone/asgard-scan/client/src/components/ProtectedRoute/ProtectedRoute.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\"; /// TODO Set this up once DB is set up\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProtectedRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  //had { ... reactRouterProps} instead of ...rest --> this shows token that's inside of sessionSotrage if user has logged in.\n  const token = sessionStorage.getItem(\"token\"); //return a Route that contains all of the REACT router props.\n\n  return /*#__PURE__*/_jsxDEV(Route // {...rest }can change to {...reactRouterProps} -->\n  , { ...rest,\n    render: routeProps => //inside of this callbackFunc it checks to see if there is a token in sessionStorage or not.\n    //if there is do something/login, if not redirct.\n    !token ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(Home, { ...routeProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 45\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ProtectedRoute;\nexport default ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["/Users/Signe/Documents/work-folder/CODING/BrainStation/Capstone/asgard-scan/client/src/components/ProtectedRoute/ProtectedRoute.js"],"names":["React","Route","Redirect","ProtectedRoute","component","Component","rest","token","sessionStorage","getItem","routeProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC,C,CACA;;;;AACA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAC5D;AAEA,QAAMC,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAd,CAH4D,CAI5D;;AACA,sBACE,QAAC,KAAD,CACE;AADF,SAEMH,IAFN;AAGE,IAAA,MAAM,EAAGI,UAAD,IACN;AACA;AACA,KAACH,KAAD,gBAAS,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAT,gBAAoC,QAAC,IAAD,OAAUG;AAAV;AAAA;AAAA;AAAA;AAAA;AANxC;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAhBD;;KAAMP,c;AAkBN,eAAeA,cAAf","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n/// TODO Set this up once DB is set up\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\n  //had { ... reactRouterProps} instead of ...rest --> this shows token that's inside of sessionSotrage if user has logged in.\n\n  const token = sessionStorage.getItem(\"token\");\n  //return a Route that contains all of the REACT router props.\n  return (\n    <Route\n      // {...rest }can change to {...reactRouterProps} -->\n      {...rest}\n      render={(routeProps) =>\n        //inside of this callbackFunc it checks to see if there is a token in sessionStorage or not.\n        //if there is do something/login, if not redirct.\n        !token ? <Redirect to=\"/login\" /> : <Home {...routeProps} />\n      }\n    />\n  );\n};\n\nexport default ProtectedRoute;\n"]},"metadata":{},"sourceType":"module"}